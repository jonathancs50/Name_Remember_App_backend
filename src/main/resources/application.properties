spring.application.name=name_remember_app
spring.datasource.url=jdbc:postgresql://localhost:5432/springbootDB
spring.datasource.username=user1
spring.datasource.password=1234
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# debugging
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
logging.level.com.personalProjects.indexCards=INFO

#Authentication with cognito
spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI}

spring.security.oauth2.client.registration.cognito.client-id=${COGNITO_CLIENT_ID}
spring.security.oauth2.client.registration.cognito.client-secret=${COGNITO_CLIENT_SECRET}
spring.security.oauth2.client.registration.cognito.scope=openid, email, profile
spring.security.oauth2.client.registration.cognito.redirect-uri=http://localhost:8080/login/oauth2/code/cognito
spring.security.oauth2.client.registration.cognito.clientName=${COGNITO_CLIENTNAME}
spring.security.oauth2.client.registration.cognito.authorization-grant-type=authorization_code

spring.security.oauth2.client.provider.cognito.issuer-uri=${JWT_ISSUER_URI}
spring.security.oauth2.client.provider.cognito.user-name-attribute=email

#Frontend URL
app.cors.allowed-origins=http://localhost:3000

#AWS Cognito
aws.accessKey=${AWS_ACCESS_KEY}
aws.secretKey=${AWS_SECRET_KEY}
aws.region=${AWS_REGION}
aws.cognito.userPoolId=${AWS_COGNITO_USERPOOL_ID}
aws.cognito.issuer=${JWT_ISSUER_URI}

